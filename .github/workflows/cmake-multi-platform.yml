# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            cmake_preset: msbuild-vcpkg
            # This commit corresponds to the 2025.04.09 tag
            vcpkgCommitId: "ce613c41372b23b1f51333815feb3edd87ef8a8b"
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            cmake_preset: ninja
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            cmake_preset: ninja
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Update apt available packages
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: sudo apt update

    - name: Install apt dependencies
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: sudo apt install -y doctest-dev doxygen google-mock googletest libsdl2-dev libspdlog-dev pkg-config

    - name: Configure CMake for Linux
      if: ${{ matrix.os == 'ubuntu-latest' }}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake --preset '${{ matrix.cmake_preset }}'
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Setup vcpkg
      if: ${{ matrix.os == 'windows-latest' }}
      uses: lukka/run-vcpkg@v11
      id: runvcpkg
      with:
        # This specifies the location of vcpkg, where it is going to
        # be restored from cache, or create from scratch.
        #
        # This is a different directory than the one used by the the
        # FetchContent vcpkg installer in CMakeLists.txt
        vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
        # The Git commit id of vcpkg to be checked out. This is only needed because we are not using a submodule.
        vcpkgGitCommitId: '${{ matrix.vcpkgCommitId}}'
        # The vcpkg.json file, which will be part of cache key computation.
        vcpkgJsonGlob: '${{ github.workspace }}/vcpkg.json'

    - name: Prints output of run-vcpkg's action
      if: ${{ matrix.os == 'windows-latest' }}
      run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}'"

    - name: Run CMake with vcpkg.json manifest
      if: ${{ matrix.os == 'windows-latest' }}
      uses: lukka/run-cmake@v10
      with:
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        configurePreset: '${{ matrix.cmake_preset }}'
        buildPreset: '${{ matrix.cmake_preset }}'
        buildPresetAdditionalArgs: "['--config ${{ matrix.build_type }}']"
        testPresetAdditionalArgs: "['--config ${{ matrix.build_type }}']"

    # - name: Configure CMake for Windows
    #   if: ${{ matrix.os == 'windows-latest' }}
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #   run: >
    #     cmake -B ${{ steps.strings.outputs.build-output-dir }}
    #     -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
    #     -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
    #     -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    #     --preset=vcpkg
    #     -S ${{ github.workspace }}

    - name: Build
      # The run-cmake step above both configures and builds with CMake for Windows
      # So we don't need to build again.
      if: ${{ matrix.os == 'ubuntu-latest' }}
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: >
        cmake --build '${{ github.workspace }}/builds/${{ matrix.cmake_preset }}'
        --preset '${{ matrix.cmake_preset }}'
        --config ${{ matrix.build_type }}

    - name: Test
      # We need to run ctest in the test subdirectory of the build
      # output directory, otherwise ctest won't find the tests.
      #
      # The other option is specifying "--test-dir test" on the ctest
      # command line
      working-directory: '${{ github.workspace }}/builds/${{ matrix.cmake_preset }}/test'
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
